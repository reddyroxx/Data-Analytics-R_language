setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path(getwd())
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length = 30)
my_seq <- seq(5,10,length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,40)
rep(0,times = 40)
play()
type(rep(0,40))
typeof(rep(0,40))
typeof(rep(0,times = 40))
nxt()
rep(c(0,1,2),times=10)
rep(c(0,1,2),each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse= " ")
my_name <- c(my_char,"Pruthvi")
my_name
paste(my_name, collapse=" ")
paste("Hello","world!",sep=" ")
paste(c(1:3),c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep = "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na = is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[C(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
play()
?identical
nxt()
identical(vect,vect2)
vect["bar"]
vect[c('foo','bar')]
swirl()
install.packages("swirl")
install.packages("swirl")
library("swirl")
rm(list = ls())
swirl()
library("swirl")
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20 , nrow = 4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE , FALSE , FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE , FALSE , FALSE)
TRUE || c(TRUE , FALSE , FALSE)
5 > 8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
exit()
rm(list = ls())
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div =2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x(1)},c(8,4,0))
play()
a = c(1,2,3)
a(1)
a[1]
nxt()
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
telegram("SUP Hello")
submit()
mad_libs(place='Bangalore',adjective='smart',noun='camera')
submit()
'I' %p% 'love' %p% 'R!'
rm(list=ls())
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- unique(flags)
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
play()
sample(1:5,10)
nxt()
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rep(rbinom(1,size=1,prob=0.7),100)
flips2 <- rbinom(n=100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,10)
rep(100,rpois(5,10))
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B %d %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
>plot
?plot
plot(x= cars$speed,y= cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x= cars$speed,y= cars$dist,xlab="Speed")
plot(x= cars$speed,y= cars$dist,ylab="Stopping Distance")
plot(x= cars$speed,y= cars$dist,ylab="Stopping Distance",xlab="Speed")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
?boxplot
boxplot(formula=mpg ~ cyl)
boxplot(formula=mpg ~ cyl,data=mtcars)
hist(mtcars$mpg)
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.package("swirl")
install.packages("swirl")
library("swirl")
swirl()
swirl()
library("swirl")
swirl()
plot(child ~ parent , galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child ~ parent ,galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
fit <- lm(child ~ parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent0)
cov(fit$residuals,galton$parent)
setwd("/home/pruthvi/Desktop/Sem5/Data Analytics/Assignments/2nd")
library(dplyr)
library(splitstackshape)
library(moments)
library(sampling)
library(psych)
library(ggcorrplot)
dataset <- read.csv("kc_house_data.csv",TRUE,",")
df_random <- dataset %>%
filter(id %in% sample(unique(id),0.75*dim(dataset)[1]))
#systematic sampling
k <- as.integer(seq(from=1, to=nrow(dataset), length.out = nrow(dataset)/4))
df_systematic <-dataset[k,]
bdrooms <- sort(unique(dataset$bedrooms))
p <- quantile(x = bdrooms,probs = .6)
bdrooms <- bdrooms[bdrooms<p]
df <- subset(dataset,dataset$bedrooms %in% bdrooms)
df_cluster <- cluster(df,c("bedrooms"), size = 5,method = "srswor")
df_cluster <- getdata(df,df_cluster)
#stratified sampling
df_stratified <- stratified(dataset, c("floors"), 0.7)
boxplot(dataset$price,df_random$price,df_systematic$price,df_cluster$price,df_stratified$price,names =  c("Population","Random","Systematic","Cluster","Stratified"),ylab = "Prices" , main = "Comparing Population with Sampling models")
pop <- c(summary(dataset$price)["Mean"],summary(dataset$price)["Median"],"StDev" = sd(dataset$price),"Skew" = skewness(dataset$price),"Kurtosis" = kurtosis(dataset$price))
ran <- c(summary(df_random$price)["Mean"],summary(dataset$price)["Median"],"StDev" = sd(df_random$price),"Skew" = skewness(df_random$price),"Kurtosis" = kurtosis(df_random$price))
sys <- c(summary(df_systematic$price)["Mean"],summary(df_systematic$price)["Median"],"StDev" = sd(df_systematic$price),"Skew" = skewness(df_systematic$price),"Kurtosis" = kurtosis(df_systematic$price))
clu <- c(summary(df_cluster$price)["Mean"],summary(df_cluster$price)["Median"],"StDev" = sd(df_cluster$price),"Skew" = skewness(df_cluster$price),"Kurtosis" = kurtosis(df_cluster$price))
stf <- c(summary(df_stratified$price)["Mean"],summary(df_stratified$price)["Median"],"StDev" = sd(df_stratified$price),"Skew" = skewness(df_stratified$price),"Kurtosis" = kurtosis(df_stratified$price))
#sampling errors
print("Sampling errors")
print(pop - ran)
print(pop-sys)
print(pop - clu)
print(pop - stf)
gr <- dataset$grade
#nr_gr <- lapply(gr, function(x) (x-mean(gr))/sd(gr))
nr_gr <- lapply(gr,function(x) (x-min(gr))/(max(gr)-min(gr)))
nr_gr <- unlist(nr_gr, use.names=FALSE)
normalization <- function(l){
l <- (l-mean(l))/sd(l)
l
}
n_prices <- normalization(dataset$price)
n_bdrooms <- normalization(dataset$bedrooms)
n_sq_liv <- normalization(dataset$sqft_living)
n_sq_lo <- normalization(dataset$sqft_lot)
n_grades <- normalization(dataset$grade)
n_sq_ab <- normalization(dataset$sqft_above)
n_sq_ba <- normalization(dataset$sqft_basement)
df <- data.frame(n_prices,n_bdrooms,n_sq_liv,n_sq_lo,n_grades,n_sq_ab,n_sq_ba)
par(mfrow=c(1,2))
hist(df$n_prices,xlab = "Normalized Prices",main = "Price")
boxplot(df$n_prices,xlab = "Normalized Prices",main = "Price")
hist(df$n_bdrooms,xlab = "Normalized number of bedrooms",main = "Bedrooms")
boxplot(df$n_bdrooms,xlab = "Normalized number of bedrooms",main = "Bedrooms")
hist(df$n_sq_liv,xlab = "Normalized Living area in sqft",main = "Living Area in sqft")
boxplot(df$n_sq_liv,xlab = "Normalized Living area in sqft",main = "Living Area in sqft")
hist(df$n_sq_lo,xlab = "Normalized Lot area in sqft",main = "Lot area in sqft")
boxplot(df$n_sq_lo,xlab = "Normalized Lot area in sqft",main = "Lot area in sqft")
hist(df$n_grades,xlab = "Normalized Grades",main = "Grade")
boxplot(df$n_grades,xlab = "Normalized Grades",main = "Grade")
hist(df$n_sq_ab,xlab = "Normalized Above area in sqft",main = "Above area in sqft")
boxplot(df$n_sq_ab,xlab = "Normalized Above area in sqft",main = "Above area in sqft")
hist(df$n_sq_ba,xlab = "Normalized Basement area in sqft",main = "Basement area in sqft")
boxplot(df$n_sq_ba,xlab = "Normalized Basement area in sqft",main = "Basement area in sqft")
par(mfrow = c(1,1))
boxplot(df$n_sq_ba,xlab = "Normalized Basement area in sqft",main = "Basement area in sqft")
setwd("/home/pruthvi/Desktop/Sem5/Data Analytics/Assignments/2nd")
library(dplyr)
library(splitstackshape)
library(moments)
library(sampling)
library(psych)
library(ggcorrplot)
dataset <- read.csv("kc_house_data.csv",TRUE,",")
df_random <- dataset %>%
filter(id %in% sample(unique(id),0.75*dim(dataset)[1]))
#systematic sampling
k <- as.integer(seq(from=1, to=nrow(dataset), length.out = nrow(dataset)/4))
df_systematic <-dataset[k,]
bdrooms <- sort(unique(dataset$bedrooms))
p <- quantile(x = bdrooms,probs = .6)
bdrooms <- bdrooms[bdrooms<p]
df <- subset(dataset,dataset$bedrooms %in% bdrooms)
df_cluster <- cluster(df,c("bedrooms"), size = 5,method = "srswor")
df_cluster <- getdata(df,df_cluster)
#stratified sampling
df_stratified <- stratified(dataset, c("floors"), 0.7)
boxplot(dataset$price,df_random$price,df_systematic$price,df_cluster$price,df_stratified$price,names =  c("Population","Random","Systematic","Cluster","Stratified"),ylab = "Prices" , main = "Comparing Population with Sampling models")
pop <- c(summary(dataset$price)["Mean"],summary(dataset$price)["Median"],"StDev" = sd(dataset$price),"Skew" = skewness(dataset$price),"Kurtosis" = kurtosis(dataset$price))
ran <- c(summary(df_random$price)["Mean"],summary(dataset$price)["Median"],"StDev" = sd(df_random$price),"Skew" = skewness(df_random$price),"Kurtosis" = kurtosis(df_random$price))
sys <- c(summary(df_systematic$price)["Mean"],summary(df_systematic$price)["Median"],"StDev" = sd(df_systematic$price),"Skew" = skewness(df_systematic$price),"Kurtosis" = kurtosis(df_systematic$price))
clu <- c(summary(df_cluster$price)["Mean"],summary(df_cluster$price)["Median"],"StDev" = sd(df_cluster$price),"Skew" = skewness(df_cluster$price),"Kurtosis" = kurtosis(df_cluster$price))
stf <- c(summary(df_stratified$price)["Mean"],summary(df_stratified$price)["Median"],"StDev" = sd(df_stratified$price),"Skew" = skewness(df_stratified$price),"Kurtosis" = kurtosis(df_stratified$price))
#sampling errors
print("Sampling errors")
print(pop - ran)
print(pop-sys)
print(pop - clu)
print(pop - stf)
gr <- dataset$grade
#nr_gr <- lapply(gr, function(x) (x-mean(gr))/sd(gr))
nr_gr <- lapply(gr,function(x) (x-min(gr))/(max(gr)-min(gr)))
nr_gr <- unlist(nr_gr, use.names=FALSE)
normalization <- function(l){
l <- (l-mean(l))/sd(l)
l
}
n_prices <- normalization(dataset$price)
n_bdrooms <- normalization(dataset$bedrooms)
n_sq_liv <- normalization(dataset$sqft_living)
n_sq_lo <- normalization(dataset$sqft_lot)
n_grades <- normalization(dataset$grade)
n_sq_ab <- normalization(dataset$sqft_above)
n_sq_ba <- normalization(dataset$sqft_basement)
df <- data.frame(n_prices,n_bdrooms,n_sq_liv,n_sq_lo,n_grades,n_sq_ab,n_sq_ba)
par(mfrow=c(1,2))
hist(df$n_prices,xlab = "Normalized Prices",main = "Price")
boxplot(df$n_prices,xlab = "Normalized Prices",main = "Price")
hist(df$n_bdrooms,xlab = "Normalized number of bedrooms",main = "Bedrooms")
boxplot(df$n_bdrooms,xlab = "Normalized number of bedrooms",main = "Bedrooms")
hist(df$n_sq_liv,xlab = "Normalized Living area in sqft",main = "Living Area in sqft")
boxplot(df$n_sq_liv,xlab = "Normalized Living area in sqft",main = "Living Area in sqft")
hist(df$n_sq_lo,xlab = "Normalized Lot area in sqft",main = "Lot area in sqft")
boxplot(df$n_sq_lo,xlab = "Normalized Lot area in sqft",main = "Lot area in sqft")
hist(df$n_grades,xlab = "Normalized Grades",main = "Grade")
boxplot(df$n_grades,xlab = "Normalized Grades",main = "Grade")
hist(df$n_sq_ab,xlab = "Normalized Above area in sqft",main = "Above area in sqft")
boxplot(df$n_sq_ab,xlab = "Normalized Above area in sqft",main = "Above area in sqft")
hist(df$n_sq_ba,xlab = "Normalized Basement area in sqft",main = "Basement area in sqft")
boxplot(df$n_sq_ba,xlab = "Normalized Basement area in sqft",main = "Basement area in sqft")
par(mfrow = c(1,1))
#c)
sk <- skewness(df)
kr <- kurtosis(df)
#c)
sk <- skewness(df)
kr <- kurtosis(df)
print(sk)
print(kr)
euc_dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
m_sq_liv <- mean(dataset$sqft_living)
m_sq_lo <- mean(dataset$sqft_lot)
m_sq_ab <- mean(dataset$sqft_above)
m_n_sq_liv <- mean(df$n_sq_liv)
m_n_sq_lo <- mean(df$n_sq_lo)
m_n_sq_ab <- mean(df$n_sq_ab)
liv_lo_cmp <- euc_dist(m_sq_liv,m_sq_lo)
liv_ab_cmp <- euc_dist(m_sq_liv,m_sq_ab)
ab_lo_cmp <- euc_dist(m_sq_ab,m_sq_lo)
n_liv_lo_cmp <- euc_dist(m_n_sq_liv,m_n_sq_lo)
n_liv_ab_cmp <- euc_dist(m_n_sq_liv,m_n_sq_ab)
n_ab_lo_cmp <- euc_dist(m_n_sq_ab,m_n_sq_lo)
#a)
df <- dataset
df$id <- NULL
df$date <- NULL
df$zipcode <- NULL
n_df<- apply(df,2,normalization)
k <- cor(n_df)
ggcorrplot(k)
yy <- colnames(df)
s_devs <- data.frame("features" = yy,"devs" = apply(df, 2, sd))
s_devs <- arrange(s_devs,devs)
low_std_dev <- head(s_devs,n=5)
print("Attributes with lowest standard deviations")
print(low_std_dev[,1])
#pc <- principal(k,nfactors = 2)
data <- n_df[, unlist(lapply(df, is.numeric))]
pca <- prcomp(data, center=TRUE, scale=TRUE)
u <- unlist(pca[2])
pca1 <- list(u[c(1:18)])
pca2 <- list(u[c(19:36)])
std_dev <- pca$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
original <- t(t(pca$x %*% t(pca$rotation)) * pca$scale + pca$center)
pca_gen <- t(t(pca$x[,1:2] %*% t(pca$rotation[,1:2])) * pca$scale + pca$center)
