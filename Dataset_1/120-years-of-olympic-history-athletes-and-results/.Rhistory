z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_sqrt
my_div
swirl()
exit
swirl()
library("swirl")
swirl()
getwd()
ls()
x <- 9
ls()
list.dir()
dir()
>list.files
?list.files
list.files().args()
list.files.args()
args(list.files)
old.dir <- getwd()
testdir <- dir.create(getwd())
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path(getwd())
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length = 30)
my_seq <- seq(5,10,length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,40)
rep(0,times = 40)
play()
type(rep(0,40))
typeof(rep(0,40))
typeof(rep(0,times = 40))
nxt()
rep(c(0,1,2),times=10)
rep(c(0,1,2),each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse= " ")
my_name <- c(my_char,"Pruthvi")
my_name
paste(my_name, collapse=" ")
paste("Hello","world!",sep=" ")
paste(c(1:3),c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep = "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na = is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[C(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
play()
?identical
nxt()
identical(vect,vect2)
vect["bar"]
vect[c('foo','bar')]
swirl()
install.packages("swirl")
install.packages("swirl")
library("swirl")
rm(list = ls())
swirl()
library("swirl")
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20 , nrow = 4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE , FALSE , FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE , FALSE , FALSE)
TRUE || c(TRUE , FALSE , FALSE)
5 > 8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
exit()
rm(list = ls())
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div =2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x(1)},c(8,4,0))
play()
a = c(1,2,3)
a(1)
a[1]
nxt()
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
telegram("SUP Hello")
submit()
mad_libs(place='Bangalore',adjective='smart',noun='camera')
submit()
'I' %p% 'love' %p% 'R!'
rm(list=ls())
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- unique(flags)
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
play()
sample(1:5,10)
nxt()
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rep(rbinom(1,size=1,prob=0.7),100)
flips2 <- rbinom(n=100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,10)
rep(100,rpois(5,10))
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B %d %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
>plot
?plot
plot(x= cars$speed,y= cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x= cars$speed,y= cars$dist,xlab="Speed")
plot(x= cars$speed,y= cars$dist,ylab="Stopping Distance")
plot(x= cars$speed,y= cars$dist,ylab="Stopping Distance",xlab="Speed")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
?boxplot
boxplot(formula=mpg ~ cyl)
boxplot(formula=mpg ~ cyl,data=mtcars)
hist(mtcars$mpg)
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.package("swirl")
install.packages("swirl")
library("swirl")
swirl()
swirl()
library("swirl")
swirl()
plot(child ~ parent , galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child ~ parent ,galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
fit <- lm(child ~ parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent0)
cov(fit$residuals,galton$parent)
setwd("/home/pruthvi/Desktop/Sem5/Data Analytics/Assignments/2nd")
library(dplyr)
dataset <- read.csv("kc_house_data.csv",TRUE,",")
gr <- dataset$grade
#nr_gr <- lapply(gr, function(x) (x-mean(gr))/sd(gr))
nr_gr <- lapply(gr,function(x) (x-min(gr))/(max(gr)-min(gr)))
nr_gr <- unlist(nr_gr, use.names=FALSE)
cols <- c("price","bedrooms","sqft_living","sqft_lot","grade","sqft_above","sqft_basement")
df <- lapply(dataset[cols], function(x) (x-mean(cols))/sd(cols))
df <- lapply(dataset[cols], function(x) (x-mean(dataset$cols))/sd(dataset$cols))
df <- dataset[cols]
for i in cols:
df[i] <- lapply(dataset[i] , function(x) (x-mean(dataset$i))/sd(dataset$i))
for(i in cols)
df[i] <- lapply(dataset[i] , function(x) (x-mean(dataset$i))/sd(dataset$i))
head(df)
tail(df)
df <- dataset[cols]
head(df)
for(i in cols)
df[i] <- lapply(df$i , function(x) (x-mean(dataset$i))/sd(dataset$i))
for(i in cols)
df$i <- lapply(df$i , function(x) (x-mean(dataset$i))/sd(dataset$i))
for(i in cols)
df[i] <- lapply(df$i , function(x) (x-mean(df$i))/sd(df$i))
prices <- dataset$price
bdrooms <- dataset$bedrooms
sq_liv <- dataset$sqft_living
sq_lo <- dataset$sqft_lot
grades <- dataset$grade
sq_ab <- dataset$sqft_above
sq_ba <- dataset$sqft_basement
n_prices <- lapply(prices, function(x) (x-mean(prices))/sd(prices))
mean(n_prices)
n_prices <- unlist(lapply(prices, function(x) (x-mean(prices))/sd(prices)),use.names = FALSE)
mean(n_prices)
n_sq_lo <- unlist(lapply(sq_lo, function(x) (x-mean(sq_lo))/sd(sq_lo)),use.names = FALSE)
sd(n_sq_lo)
n_prices <- unlist(lapply(prices, function(x) (x-mean(prices))/sd(prices)),use.names = FALSE)
n_bdrooms <- unlist(lapply(bdrooms, function(x) (x-mean(bdrooms))/sd(bdrooms)),use.names = FALSE)
n_sq_liv <- unlist(lapply(sq_liv, function(x) (x-mean(sq_liv))/sd(sq_liv)),use.names = FALSE)
n_sq_lo <- unlist(lapply(sq_lo, function(x) (x-mean(sq_lo))/sd(sq_lo)),use.names = FALSE)
n_grades <- unlist(lapply(grades, function(x) (x-mean(grades))/sd(grades)),use.names = FALSE)
n_sq_ab <- unlist(lapply(sq_ab, function(x) (x-mean(sq_ab))/sd(sq_ab)),use.names = FALSE)
n_sq_ba <- unlist(lapply(sq_ba, function(x) (x-mean(sq_ba))/sd(sq_ba)),use.names = FALSE)
df <- data.frame(n_prices,n_bdrooms,n_sq_liv,n_sq_lo,n_grades,n_sq_ab,n_sq_ba)
head(df)
plot(df$n_prices)
hist(df$n_prices)
library(moments)
install.packages(moments)
install.packages("moments")
library(moments)
skewness(df$n_prices)
kurtosis(df$n_prices)
hist(df$n_prices)
?hist
hist(df$n_prices,breaks=20)
hist(df$n_prices,xlim = xrange)
xrange <- range(df$n_prices)
hist(df$n_prices,xlim = xrange)
hist(df$n_bdrooms)
hist(df$n_bdrooms,breaks = 40)
hist(df$n_bdrooms,breaks = 100)
hist(df$n_bdrooms,breaks = 20)
hist(df$n_bdrooms,breaks = 40)
hist(df$n_sq_ab)
hist(df$n_sq_ba)
hist(df$n_sq_lo)
hist(df$n_sq_liv)
library(dplyr)
rm(list=ls())
library(dplyr)
setwd("/home/pruthvi/Desktop/Sem5/Data Analytics/Assignments/1st/120-years-of-olympic-history-athletes-and-results")
dataset <- read.csv("athlete_events.csv",TRUE,",")
indian_medalists <- unique(subset(dataset,dataset$Team == "India"& ((dataset$Medal=='Gold') | (dataset$Medal=='Silver') | (dataset$Medal=='Bronze')),Name))
indian_medalists_names <- unlist(indian_medalists[,1],use.names = FALSE)
print("Indian medalists' Names : ")
print(indian_medalists_names)
print("Total number of medals won by India in different sports since 1960")
no_of_medals <- length(unique(subset(dataset,dataset$Team=="India" & (dataset$Medal=="Gold"|dataset$Medal=="Silver"|dataset$Medal=="Bronze") & dataset$Year>= 1960,select = c(Sport,Year,Medal)))[,1])
print(no_of_medals)
k <- unique(subset(dataset,dataset$Team=="India" & (dataset$Medal=="Gold"|dataset$Medal=="Silver"|dataset$Medal=="Bronze") & dataset$Year>= 1960,select = c(Sport,Year,Medal)))
print("Sport with the highest number of medals : ")
sports <- unlist(k[,1], use.names=FALSE)
most_medal_game <- names(table(sports))[table(sports)==max(table(sports))]
print(most_medal_game)
rm(list=ls())
dataset <- read.csv("athlete_events.csv",TRUE,",")
k <- subset(dataset,select = c(Name,Year,Medal))
c <- count(k,Name,Year)
pp <- count(c,Name)
x <- subset(pp,pp$nn>1)
print("Players with multiple appearances ")
print(x)
k <- filter(dataset,Medal=="Gold"|Medal=="Silver" | Medal=="Bronze")
c <- count(k,Name,Year)
pp <- count(c,Name)
x <- subset(pp,pp$nn>1)
print("Players who have won at multiple appearances")
print(x)
k <- filter(dataset,Medal=="Gold"|Medal=="Silver" | Medal=="Bronze")
c <- count(k,Name,Year)
x <- subset(c,c$n==max(c$n))
print("Players who have won maximum medals in a single appearance")
print(x)
rm(list=ls())
dataset <- read.csv("athlete_events.csv",TRUE,",")
males <- filter(dataset,Sex=="M")
males <- unique(select(males,Name,NOC,Sex,Year))
c <- count(males,NOC,Year)
print("Number of male participants per country per year")
print(c)
females <- filter(dataset,Sex=="F")
females <- unique(select(females,Name,NOC,Sex,Year))
d <- count(females,NOC,Year)
print("Number of female participants per country per year")
print(d)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
print("For male")
print(mean(c$n), na.rm =True)
print(median(c$n))
print(getmode(c$n))
print(IQR(c$n))
print(sd(c$n))
print(quantile(c$n, 0.9))
print("For female")
print(mean(d$n), na.rm =True)
print(median(d$n))
print(getmode(d$n))
print(IQR(d$n))
print(sd(d$n))
print(quantile(d$n, 0.9))
boxplot(c$n,d$n,names=c("Males","Females"),ylab="Number of people",main="Number of Males and Females per year per country")
rm(list=ls())
dataset <- read.csv("athlete_events.csv",TRUE,",")
k <- filter(dataset,NOC=="IND" & (Medal=="Gold"|Medal=="Silver"|Medal=="Bronze"))
k <- select(k,Name,Medal,Sport,Year)
hist(k$Year,xlab = "Years",ylab = "Number of Medals",main = "Total number of medals over the years ")
k <- filter(dataset,Sport=="Athletics" & Medal=="Gold")
k <- select(k,Age,Height)
plot(k$Age,k$Height , main = "Height vs Age of Gold Medalists", xlab = "Ages",ylab = "Heights")
coeff <- cor(k$Age,k$Height,use = "complete.obs")
print(coeff)
